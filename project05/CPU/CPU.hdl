// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl
/**
 * The Hack Central Processing unit (CPU).
 * Parses the binary code in the instruction input and executes it according to the
 * Hack machine language specification. In the case of a C-instruction, computes the
 * function specified by the instruction. If the instruction specifies to read a memory
 * value, the inM input is expected to contain this value. If the instruction specifies
 * to write a value to the memory, sets the outM output to this value, sets the addressM
 * output to the target address, and asserts the writeM output (when writeM == 0, any
 * value may appear in outM).
 * If the reset input is 0, computes the address of the next instruction and sets the
 * pc output to that value. If the reset input is 1, sets pc to 0.
 * Note: The outM and writeM outputs are combinational: they are affected by the
 * instruction's execution during the current cycle. The addressM and pc outputs are
 * clocked: although they are affected by the instruction's execution, they commit to
 * their new values only in the next cycle.
 */
CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to restart the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // Address of next instruction

    PARTS:
    Not (in=instruction[15], out=notacinstruction);
    Mux16 (a=ALU, b=instruction, sel=notacinstruction, out=omux1);

    Or (a=notacinstruction, b=instruction[5], out=loadareg);
    ARegister (in=omux1, load=loadareg, out=AREG, out[0..14]=addressM);

    And (a=instruction[15], b=instruction[12], out=AorM);
	Mux16 (a=AREG, b=inM, sel=AorM, out=AM);

    And (a=instruction[15], b=instruction[4], out=loaddreg);
    DRegister (in=ALU, load=loaddreg, out=DREG);

    ALU (x=DREG, y=AM, zx=instruction[11], nx=instruction[10], zy=instruction[9], ny=instruction[8], f=instruction[7], no=instruction[6], out=ALU, out=outM, zr=ZEROALU, ng=NEGATIVEALU);

    And (a=instruction[15], b=instruction[3], out=writeM);

    Not(in=NEGATIVEALU,out=positive);
	Not(in=ZEROALU,out=nzero);

    And(a=instruction[15], b=instruction[0], out=jgt);
	And(a=positive, b=nzero, out=posnzero);
	And(a=jgt, b=posnzero, out=load1);

    And(a=instruction[15], b=instruction[1], out=jeq);
	And(a=jeq, b=ZEROALU, out=load2);

    And(a=instruction[15], b=instruction[2], out=jlt);
	And(a=jlt, b=NEGATIVEALU, out=load3);

    Or(a=load1, b=load2, out=loadt);
	Or(a=load3, b=loadt, out=load);
 
    PC (in=AREG, load=load, inc=true, reset=reset, out[0..14]=pc);
}
